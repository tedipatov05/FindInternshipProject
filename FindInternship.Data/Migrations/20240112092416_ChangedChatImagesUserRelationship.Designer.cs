// <auto-generated />
using System;
using FindInternship.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FindInternship.Data.Migrations
{
    [DbContext(typeof(FindInternshipDbContext))]
    [Migration("20240112092416_ChangedChatImagesUserRelationship")]
    partial class ChangedChatImagesUserRelationship
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.23")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("FindInternship.Data.Models.Ability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AbilityText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Abilities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AbilityText = "C"
                        },
                        new
                        {
                            Id = 2,
                            AbilityText = "C#"
                        },
                        new
                        {
                            Id = 3,
                            AbilityText = "ASP.NET"
                        },
                        new
                        {
                            Id = 4,
                            AbilityText = "JS"
                        },
                        new
                        {
                            Id = 5,
                            AbilityText = "Node.js"
                        },
                        new
                        {
                            Id = 6,
                            AbilityText = "PHP"
                        },
                        new
                        {
                            Id = 7,
                            AbilityText = "Python"
                        },
                        new
                        {
                            Id = 8,
                            AbilityText = "Entity Framework"
                        });
                });

            modelBuilder.Entity("FindInternship.Data.Models.ChatImage", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChatMessageId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GroupId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("ChatMessageId");

                    b.HasIndex("GroupId");

                    b.ToTable("ChatImages");
                });

            modelBuilder.Entity("FindInternship.Data.Models.ChatMessage", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ReceiverImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReceiverUsername")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("SendedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserId");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("FindInternship.Data.Models.Class", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Grade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.Property<string>("Speciality")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TeacherId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("SchoolId");

                    b.ToTable("Classes");

                    b.HasData(
                        new
                        {
                            Id = "0edc45cb-b2f1-48a2-8f6b-17910e09a147",
                            Grade = "12 Б",
                            SchoolId = 1,
                            Speciality = "Приложен програмист",
                            TeacherId = "2644afb5-f916-4b3f-b451-9ff86c881de3"
                        });
                });

            modelBuilder.Entity("FindInternship.Data.Models.Company", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Services")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = "e309dc7e-dad7-42cc-b83b-febb316cc49e",
                            Description = "Това е нова компания, която се занимава с изработката и поддържането на уеб приложения разработени за клиенти.",
                            Services = "Изработка на уеб приложение, поддържане на сървъри",
                            UserId = "cb5ee792-90f6-4e50-8af1-da2f99d9f892"
                        });
                });

            modelBuilder.Entity("FindInternship.Data.Models.CompanyAbility", b =>
                {
                    b.Property<string>("CompanyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AbilityId")
                        .HasColumnType("int");

                    b.HasKey("CompanyId", "AbilityId");

                    b.HasIndex("AbilityId");

                    b.ToTable("Technologies");

                    b.HasData(
                        new
                        {
                            CompanyId = "e309dc7e-dad7-42cc-b83b-febb316cc49e",
                            AbilityId = 2
                        },
                        new
                        {
                            CompanyId = "e309dc7e-dad7-42cc-b83b-febb316cc49e",
                            AbilityId = 3
                        },
                        new
                        {
                            CompanyId = "e309dc7e-dad7-42cc-b83b-febb316cc49e",
                            AbilityId = 4
                        });
                });

            modelBuilder.Entity("FindInternship.Data.Models.Document", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClassId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DocumentUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("FindInternship.Data.Models.Group", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("FindInternship.Data.Models.Lector", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ProfilePictureUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Lectors");
                });

            modelBuilder.Entity("FindInternship.Data.Models.Meeting", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ClassId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("CompanyId");

                    b.ToTable("Meetings");
                });

            modelBuilder.Entity("FindInternship.Data.Models.Request", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClassId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("CompanyId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("FindInternship.Data.Models.School", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Schools");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Казанлък",
                            Name = "ППМГ Никола Обрешков"
                        });
                });

            modelBuilder.Entity("FindInternship.Data.Models.Student", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClassId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("UserId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = "30b28597-2305-4f3b-a21a-95b287cae818",
                            ClassId = "0edc45cb-b2f1-48a2-8f6b-17910e09a147",
                            UserId = "080a469a-b5a2-44cc-a660-eea8e6fd05a5"
                        });
                });

            modelBuilder.Entity("FindInternship.Data.Models.StudentAbility", b =>
                {
                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AbilityId")
                        .HasColumnType("int");

                    b.HasKey("StudentId", "AbilityId");

                    b.HasIndex("AbilityId");

                    b.ToTable("StudentAbilities");
                });

            modelBuilder.Entity("FindInternship.Data.Models.Teacher", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClassId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ClassId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = "2644afb5-f916-4b3f-b451-9ff86c881de3",
                            ClassId = "0edc45cb-b2f1-48a2-8f6b-17910e09a147",
                            UserId = "93418f37-da3b-4c78-b0ae-8f0022b09681"
                        });
                });

            modelBuilder.Entity("FindInternship.Data.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("DATE");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(169)
                        .HasColumnType("nvarchar(169)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(56)
                        .HasColumnType("nvarchar(56)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegisteredOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "080a469a-b5a2-44cc-a660-eea8e6fd05a5",
                            AccessFailedCount = 0,
                            Address = "ул. Ал. Стамболийски 30 ет.3 ап.11",
                            BirthDate = new DateTime(2008, 4, 12, 13, 24, 0, 0, DateTimeKind.Unspecified),
                            City = "Казанлък",
                            ConcurrencyStamp = "417cee2c-9fe5-4d92-81d4-344a74a6a85d",
                            Country = "България",
                            Email = "petarpetrov@abv.bg",
                            EmailConfirmed = false,
                            Gender = "Мъж",
                            IsActive = true,
                            IsApproved = true,
                            LockoutEnabled = false,
                            Name = "Петър Петров",
                            NormalizedEmail = "PETARPETROV@ABV.BG",
                            NormalizedUserName = "PETAR",
                            PasswordHash = "AQAAAAEAACcQAAAAEC1wJ0EhdKe08MI/tW8vGfIcbGSCd8+y3aGuh34LE6k/w0lT7Qs5Vj6m7Lx9FpOHYQ==",
                            PhoneNumber = "0885763826",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://res.cloudinary.com/ddriqreo7/image/upload/v1697607303/projectImages/xbhwflepot9qpwmiiq6u.jpg",
                            RegisteredOn = new DateTime(2024, 1, 12, 9, 24, 15, 513, DateTimeKind.Utc).AddTicks(6657),
                            SecurityStamp = "ad69ab67-ad3a-4be8-949a-028cb9c5775f",
                            TwoFactorEnabled = false,
                            UserName = "petar"
                        },
                        new
                        {
                            Id = "93418f37-da3b-4c78-b0ae-8f0022b09681",
                            AccessFailedCount = 0,
                            Address = "ул.Възраждане 6 ет.2 ап.8",
                            BirthDate = new DateTime(1968, 2, 8, 11, 20, 0, 0, DateTimeKind.Unspecified),
                            City = "Казанлък",
                            ConcurrencyStamp = "b235cf93-90c2-41f3-9da0-19e57a08fcd3",
                            Country = "България",
                            Email = "georgidimitrov@abv.bg",
                            EmailConfirmed = false,
                            Gender = "Мъж",
                            IsActive = true,
                            IsApproved = true,
                            LockoutEnabled = false,
                            Name = "Георги Димитров",
                            NormalizedEmail = "GEORGIDIMITROV@ABV.BG",
                            NormalizedUserName = "GEORGI",
                            PasswordHash = "AQAAAAEAACcQAAAAEGdmghEQKR7K0uVJD0IrHUfeKVyWPAGwe5fvdSIvNHg4RTjfLtr0TWo6Tcz6bcwqXg==",
                            PhoneNumber = "0885789826",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://res.cloudinary.com/ddriqreo7/image/upload/v1697608565/projectImages/mvorrsshjbw1e8bzfzgq.jpg",
                            RegisteredOn = new DateTime(2024, 1, 12, 9, 24, 15, 514, DateTimeKind.Utc).AddTicks(8110),
                            SecurityStamp = "fe5af2c4-b6eb-4c98-8c80-e20f3af14f83",
                            TwoFactorEnabled = false,
                            UserName = "georgi"
                        },
                        new
                        {
                            Id = "cb5ee792-90f6-4e50-8af1-da2f99d9f892",
                            AccessFailedCount = 0,
                            Address = "ул. Стара планина 63",
                            BirthDate = new DateTime(2015, 5, 9, 11, 20, 0, 0, DateTimeKind.Unspecified),
                            City = "Казанлък",
                            ConcurrencyStamp = "434eb83c-dc55-4bc1-87a7-fca5e0274e75",
                            Country = "България",
                            Email = "newtechies@abv.bg",
                            EmailConfirmed = false,
                            IsActive = true,
                            IsApproved = true,
                            LockoutEnabled = false,
                            Name = "New Techies",
                            NormalizedEmail = "NEWTECHIES@ABV.BG",
                            NormalizedUserName = "NEWTECHIES",
                            PasswordHash = "AQAAAAEAACcQAAAAEJ2cTUILXEwmWONd/dQK9uOGKayt+Eg2XCgTD3n+bGkFLUlcYMI9yBAZtbmJPt8k6A==",
                            PhoneNumber = "0885789546",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://res.cloudinary.com/ddriqreo7/image/upload/v1699781438/projectImages/pblz1onyuacbk2ds4g8n.png",
                            RegisteredOn = new DateTime(2024, 1, 12, 9, 24, 15, 515, DateTimeKind.Utc).AddTicks(9553),
                            SecurityStamp = "19c99cb2-bf83-4108-9763-6e9d892fc061",
                            TwoFactorEnabled = false,
                            UserName = "NewTechies"
                        },
                        new
                        {
                            Id = "20dcf707-dfd9-4aae-b8c3-f3b9844e09d8",
                            AccessFailedCount = 0,
                            Address = "ул. Незабравка 3",
                            BirthDate = new DateTime(2015, 7, 18, 11, 20, 0, 0, DateTimeKind.Unspecified),
                            City = "Енина",
                            ConcurrencyStamp = "8a60c292-7720-4a1e-9370-4e4129b2c6e6",
                            Country = "България",
                            Email = "admin@abv.bg",
                            EmailConfirmed = false,
                            Gender = "Мъж",
                            IsActive = true,
                            IsApproved = true,
                            LockoutEnabled = false,
                            Name = "Admin",
                            NormalizedEmail = "ADMIN@ABV.BG",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEPoV6cf8JwPiOQcP2ny3bneHkhhrODzDbeStRszkIgvljU/nmnu7XO5UucsdWqJN7g==",
                            PhoneNumber = "0889864842",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://res.cloudinary.com/ddriqreo7/image/upload/v1697617373/projectImages/pyb6v86l6myou9h1sxca.jpg",
                            RegisteredOn = new DateTime(2024, 1, 12, 9, 24, 15, 517, DateTimeKind.Utc).AddTicks(937),
                            SecurityStamp = "41118a31-1fdc-4feb-9497-ada3d117d914",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        });
                });

            modelBuilder.Entity("FindInternship.Data.Models.UserGroup", b =>
                {
                    b.Property<string>("GroupId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("GroupId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserGroups");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "e6fc051f-3440-4f69-89e1-8a696c027fc2",
                            ConcurrencyStamp = "c14f3088-db34-4c19-92a2-efe74455ebf2",
                            Name = "Company",
                            NormalizedName = "COMPANY"
                        },
                        new
                        {
                            Id = "03f3054b-c9a2-4198-a6c9-a96f3142ff53",
                            ConcurrencyStamp = "6a1599da-fa43-45c3-b991-c9272f1b15ac",
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = "36ae84ad-bb53-48ad-9503-bfe33221785d",
                            ConcurrencyStamp = "55e0408a-c567-40b0-9135-c53a2e2ffd2c",
                            Name = "Teacher",
                            NormalizedName = "TEACHER"
                        },
                        new
                        {
                            Id = "e2f6cb22-631b-47c7-9ac0-19f89455b2a5",
                            ConcurrencyStamp = "54838cbc-6269-41fc-9669-f3f70ecaf421",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "cb5ee792-90f6-4e50-8af1-da2f99d9f892",
                            RoleId = "e6fc051f-3440-4f69-89e1-8a696c027fc2"
                        },
                        new
                        {
                            UserId = "080a469a-b5a2-44cc-a660-eea8e6fd05a5",
                            RoleId = "03f3054b-c9a2-4198-a6c9-a96f3142ff53"
                        },
                        new
                        {
                            UserId = "93418f37-da3b-4c78-b0ae-8f0022b09681",
                            RoleId = "36ae84ad-bb53-48ad-9503-bfe33221785d"
                        },
                        new
                        {
                            UserId = "20dcf707-dfd9-4aae-b8c3-f3b9844e09d8",
                            RoleId = "e2f6cb22-631b-47c7-9ac0-19f89455b2a5"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FindInternship.Data.Models.ChatImage", b =>
                {
                    b.HasOne("FindInternship.Data.Models.ChatMessage", "ChatMessage")
                        .WithMany("Images")
                        .HasForeignKey("ChatMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FindInternship.Data.Models.Group", "Group")
                        .WithMany("ChatImages")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatMessage");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("FindInternship.Data.Models.ChatMessage", b =>
                {
                    b.HasOne("FindInternship.Data.Models.Group", "Group")
                        .WithMany("ChatMessages")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FindInternship.Data.Models.User", "User")
                        .WithMany("ChatMessages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FindInternship.Data.Models.Class", b =>
                {
                    b.HasOne("FindInternship.Data.Models.Company", "Company")
                        .WithMany("Classes")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("FindInternship.Data.Models.School", "School")
                        .WithMany("Classes")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("School");
                });

            modelBuilder.Entity("FindInternship.Data.Models.Company", b =>
                {
                    b.HasOne("FindInternship.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FindInternship.Data.Models.CompanyAbility", b =>
                {
                    b.HasOne("FindInternship.Data.Models.Ability", "Ability")
                        .WithMany("Companies")
                        .HasForeignKey("AbilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FindInternship.Data.Models.Company", "Company")
                        .WithMany("Technologies")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ability");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("FindInternship.Data.Models.Document", b =>
                {
                    b.HasOne("FindInternship.Data.Models.Class", "Class")
                        .WithMany("Documents")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Class");
                });

            modelBuilder.Entity("FindInternship.Data.Models.Lector", b =>
                {
                    b.HasOne("FindInternship.Data.Models.Company", "Company")
                        .WithMany("Lectors")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("FindInternship.Data.Models.Meeting", b =>
                {
                    b.HasOne("FindInternship.Data.Models.Class", "Class")
                        .WithMany("Meetings")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FindInternship.Data.Models.Company", "Company")
                        .WithMany("Meetings")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("FindInternship.Data.Models.Request", b =>
                {
                    b.HasOne("FindInternship.Data.Models.Class", "Class")
                        .WithMany("Requests")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FindInternship.Data.Models.Company", "Company")
                        .WithMany("Requests")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("FindInternship.Data.Models.Student", b =>
                {
                    b.HasOne("FindInternship.Data.Models.Class", "Class")
                        .WithMany("Students")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FindInternship.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FindInternship.Data.Models.StudentAbility", b =>
                {
                    b.HasOne("FindInternship.Data.Models.Ability", "Ability")
                        .WithMany("Students")
                        .HasForeignKey("AbilityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FindInternship.Data.Models.Student", "Student")
                        .WithMany("Abilities")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Ability");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("FindInternship.Data.Models.Teacher", b =>
                {
                    b.HasOne("FindInternship.Data.Models.Class", "Class")
                        .WithOne("Teacher")
                        .HasForeignKey("FindInternship.Data.Models.Teacher", "ClassId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FindInternship.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FindInternship.Data.Models.UserGroup", b =>
                {
                    b.HasOne("FindInternship.Data.Models.Group", "Group")
                        .WithMany("UsersGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FindInternship.Data.Models.User", "User")
                        .WithMany("UserGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FindInternship.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FindInternship.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FindInternship.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FindInternship.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FindInternship.Data.Models.Ability", b =>
                {
                    b.Navigation("Companies");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("FindInternship.Data.Models.ChatMessage", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("FindInternship.Data.Models.Class", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("Meetings");

                    b.Navigation("Requests");

                    b.Navigation("Students");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("FindInternship.Data.Models.Company", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("Lectors");

                    b.Navigation("Meetings");

                    b.Navigation("Requests");

                    b.Navigation("Technologies");
                });

            modelBuilder.Entity("FindInternship.Data.Models.Group", b =>
                {
                    b.Navigation("ChatImages");

                    b.Navigation("ChatMessages");

                    b.Navigation("UsersGroups");
                });

            modelBuilder.Entity("FindInternship.Data.Models.School", b =>
                {
                    b.Navigation("Classes");
                });

            modelBuilder.Entity("FindInternship.Data.Models.Student", b =>
                {
                    b.Navigation("Abilities");
                });

            modelBuilder.Entity("FindInternship.Data.Models.User", b =>
                {
                    b.Navigation("ChatMessages");

                    b.Navigation("UserGroups");
                });
#pragma warning restore 612, 618
        }
    }
}
